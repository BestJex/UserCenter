{"User":"com.stalary.usercenter.data.entity.User","Address":"com.stalary.usercenter.data.dto.Address","PasswordUtil":"com.stalary.usercenter.utils.PasswordUtil","Formatter":"com.stalary.usercenter.config.Formatter","Constant":"com.stalary.usercenter.data.Constant","TimeUtil":"com.stalary.usercenter.utils.TimeUtil","UserRepo":"com.stalary.usercenter.repo.UserRepo","MessageFormatter":"com.stalary.usercenter.config.MessageFormatter","OutClient":"com.stalary.usercenter.client.OutClient","DigestUtil":"com.stalary.usercenter.utils.DigestUtil","TokenController":"com.stalary.usercenter.controller.TokenController","ExceptionHandle":"com.stalary.usercenter.exception.ExceptionHandle","ProjectVo":"com.stalary.usercenter.data.vo.ProjectVo","CrossDomainFilter":"com.stalary.usercenter.config.CrossDomainFilter","Stat":"com.stalary.usercenter.data.entity.Stat","UCUtil":"com.stalary.usercenter.utils.UCUtil","Consumer":"com.stalary.usercenter.service.lightmq.Consumer","UserVo":"com.stalary.usercenter.data.vo.UserVo","KafkaAppender":"com.stalary.usercenter.config.KafkaAppender","TestController":"com.stalary.usercenter.controller.TestController","ProjectInfo":"com.stalary.usercenter.data.dto.ProjectInfo","PrefixRedisSerializer":"com.stalary.usercenter.config.PrefixRedisSerializer","CacheConfig":"com.stalary.usercenter.config.CacheConfig","BaseService":"com.stalary.usercenter.service.BaseService","Ticket":"com.stalary.usercenter.data.entity.Ticket","MyException":"com.stalary.usercenter.exception.MyException","TicketRepo":"com.stalary.usercenter.repo.TicketRepo","LogRepo":"com.stalary.usercenter.repo.LogRepo","UserService":"com.stalary.usercenter.service.UserService","ThreadHolder":"com.stalary.usercenter.data.dto.ThreadHolder","Log":"com.stalary.usercenter.data.entity.Log","StatRepo":"com.stalary.usercenter.repo.StatRepo","UserStat":"com.stalary.usercenter.data.dto.UserStat","BaseEntity":"com.stalary.usercenter.data.entity.BaseEntity","ProjectRepo":"com.stalary.usercenter.repo.ProjectRepo","FacadeController":"com.stalary.usercenter.controller.FacadeController","ProjectService":"com.stalary.usercenter.service.ProjectService","TicketService":"com.stalary.usercenter.service.TicketService","ResponseMessage":"com.stalary.usercenter.data.dto.ResponseMessage","ResultEnum":"com.stalary.usercenter.data.ResultEnum","Project":"com.stalary.usercenter.data.entity.Project","MailService":"com.stalary.usercenter.service.MailService","UserContextHolder":"com.stalary.usercenter.handle.UserContextHolder","HttpResult":"com.stalary.usercenter.data.dto.HttpResult","UsercenterApplication":"com.stalary.usercenter.UsercenterApplication","StatService":"com.stalary.usercenter.service.StatService","LogService":"com.stalary.usercenter.service.LogService","BaseRepo":"com.stalary.usercenter.repo.BaseRepo"},,,UserContextHolder~~ UserContextHolder @author lirongqian @since 26/12/2017 ~~@@@PrefixRedisSerializer~~ PrefixRedisSerializer @author lirongqian @since 2018/10/21 ~~@@@KafkaAppender~~ KafkaAppender @author lirongqian @since 2018/04/02 ~~@@@CacheConfig~~ CacheConfig @author lirongqian @since 2018/10/22 ~~ redis序列化配置，使用lettuce客户端 ~~@@@CrossDomainFilter~~Formatter~~ @author Stalary @description @date 2018/4/2 ~~@@@MessageFormatter~~ MessageFormatter 日志规则为 user_log:type:id:content @author lirongqian @since 2018/04/02 ~~@@@DigestUtil~~ DigestUtil @author lirongqian @since 2018/02/09 ~~~~@@@PasswordUtil~~ PasswordUtil @author lirongqian @since 2018/02/09 ~~~~@@@UCUtil~~ @(#)UCUtil.java, 2019-01-13. Copyright 2019 Stalary. ~~ UCUtil @author lirongqian @since 2019/01/13 ~~@@@TimeUtil~~ TimeUtil @author lirongqian @since 2018/03/25 ~~@@@TokenController~~ TokenController 使用token操作的Controller @author lirongqian @since 2018/03/24 ~~ @method register 用户注册 @param user 用户对象 @param key 项目的key @return token ~~ @method login 用户登陆，传入用户名和密码 @param user 用户对象 @param key 项目的key @return token ~~ @method update 修改密码 @param user 用户对象 @param key 项目的key @return token ~~ @method updateInfo 更新用户信息 @param user 用户对象 @param key 项目的key @return token ~~@@@TestController~~ TestController @author lirongqian @since 2018/03/26 ~~@@@FacadeController~~ FacadeController 提供对外服务的Controller @author lirongqian @since 2018/03/27 ~~ @method register 项目注册 @param name 项目名 @param phone 负责人手机号 @return ProjectInfo 生成的项目信息 ~~ @method getAllProject 获取所有项目信息 @return ProjectVo ~~ @method getInfo 获取项目信息 @param name 项目名 @param phone 负责人手机号 @return ProjectInfo 生成的项目信息 ~~ @method getUser 通过token获取用户信息 @param token token @param key 项目的key @return User 用户对象 ~~ @method getAllUserStat 获取当前项目的所有统计信息 @param projectId 项目id @param key 项目的key ~~ @method getUserStat 获取指定项目某个用户的统计信息 @param projectId 项目id @param key 项目的key @param userId 用户id @return Stat 统计信息 ~~ @method getByRole 获取项目中指定角色的所有用户 @param projectId 项目id @param key 项目的key @param role 角色id @return User 用户对象 ~~ @method getById 通过id获取用户信息 @param userId 用户id @param projectId 项目id @param key 项目的key @return User 用户对象 ~~ @method getLog 获取当前项目的所有日志 @param projectId 项目id @param key 项目的key @return Log 日志对象 ~~ @method getProjectUser 获取当前项目所有用户信息 @param projectId 项目id @param key 项目的key @return UserVo 用户信息 ~~@@@UsercenterApplication~~@@@UserService~~ UserService @author lirongqian @since 2018/03/25 ~~ 用于执行一些异步任务 ~~ 对key，username, password进行预校验 ~~~~@@@MailService~~ MailService @author wangshuguang @since 2018/03/31 ~~ 发送不带附件的简单邮件，用于提示账号登录异常 邮件由于不存在id，所以默认id设置为-1 @param receiver 收件人 ~~~~@@@TicketService~~ TicketService @author lirongqian @since 2018/03/26 ~~ 判断ticket是否过期 @param userId @return ~~@@@ProjectService~~ ProjectService @author lirongqian @since 2018/03/27 ~~ 验证密钥 @return ~~@@@BaseService~~ BaseService @author lirongqian @since 2018/03/25 ~~@@@StatService~~ StatisticsService @author lirongqian @since 2018/03/26 ~~~~@@@Consumer~~ Consumer @author lirongqian @since 2018/03/21 ~~~~@@@LogService~~ LogService @author lirongqian @since 2018/03/25 ~~~~@@@ResponseMessage~~ @model ResponseMessage @description 返回对象 @field code 状态码 @field msg 信息 @field success 是否成功 @field data 数据 ~~ 状态码 ~~ 信息 ~~ 是否成功 ~~ 数据 ~~@@@HttpResult~~ HttpResult @author lirongqian @since 2018/03/25 ~~ 响应码 ~~ 响应体 ~~@@@Address~~ @model Address @description 城市信息 @field address 城市名称 @field count 登陆次数 ~~@@@UserStat~~ UserStat @author lirongqian @since 2018/03/26 ~~ 用户id ~~ 登陆的城市 ~~ 最近一次登陆的时间 ~~@@@ProjectInfo~~ ProjectInfo @author lirongqian @since 2018/03/27 ~~@@@ThreadHolder~~ @(#)ThreadHolder.java, 2018-06-06. <p> Copyright 2018 Stalary. ~~ ThreadHolder @author lirongqian @since 2018/05/22 ~~ 线程id ~~ 线程名称 ~~ 线程状态 ~~@@@UserVo~~ @(#)UserVo.java, 2019-01-13. Copyright 2019 Stalary. ~~ @model UserVo @description 用户信息Vo @field id 用户id @field username 用户名 @field role 用户角色 @field createTime 用户注册时间 @author lirongqian @since 2019/01/13 ~~@@@ProjectVo~~ @(#)ProjectVo.java, 2019-01-13. Copyright 2019 Stalary. ~~ @model ProjectVo @description 项目信息Vo @author lirongqian @since 2019/01/13 @field name 项目名称 @field createTime 开始使用时间 ~~@@@BaseEntity~~ BaseEntity @author lirongqian @since 2018/03/24 ~~ 自增id ~~ 创建时间 ~~@@@Stat~~ @model Stat @description 统计对象 @field loginCount 登陆次数 @field cityList 登陆城市列表,见Address ~~ 关联的用户id ~~ 登陆次数 ~~ 登陆的城市 ~~ 最近一次登陆的时间 ~~@@@User~~ @model User @description 用户对象 @field username 用户名 @field nickname 昵称(非必须) @field email 邮箱(非必须) @field phone 手机号(非必须) @field avatar 头像(非必须) @field password 密码 @field projectId 项目id @field remember 是否记住密码 @field role 默认为0，代表最低普通用户，其他规则调用方自行构建 @field firstId 预留的绑定id字段 @field secondId 预留的绑定id字段 @field thirdId 预留的绑定id字段 @field status 状态，-1为删除，0为正常，默认为0 ~~ 用户名 ~~ 昵称(非必须) ~~ 邮箱(非必须) ~~ 手机号(非必须) ~~ 密码 ~~ 盐 ~~ 项目id ~~ 默认为0，代表最低普通用户，其他规则调用方自行构建 ~~ 预留的绑定id字段 ~~ 状态，-1为删除，0为正常，默认为0 ~~@@@Log~~ @model Log @description 日志对象 @field level 日志等级 @field content 日志内容 @field commonId 日志种类(user|project) @field count 通用id @field level 次数 ~~ 日志等级 ~~ 日志内容 ~~ 日志种类(user，project) ~~ 通用id ~~ 次数 ~~ 最后更新时间 ~~@@@Ticket~~ Ticket @author lirongqian @since 2018/03/24 ~~ 关联的用户id ~~ ticket内容 ~~ 到期时间 ~~@@@Project~~ Project @author lirongqian @since 2018/03/27 ~~ 项目名称 ~~ 每个项目对应的密钥 ~~ 项目联系人手机号 ~~ 状态，-1为删除，0为正常，默认为0 ~~@@@Constant~~ Constant 用户中心的工具类，包括常量的存放 @author lirongqian @since 2018/03/25 ~~ 配置支持跨域列表 ~~@@@ResultEnum~~ @author Stalary @description @date 2018/03/24 ~~~~@@@MyException~~ @author Stalary @description @date 2018/01/04 ~~@@@ExceptionHandle~~ @author Stalary @description @date 2018/01/04 ~~@@@OutClient~~ @author Stalary @description @date 2018/11/4 ~~@@@ProjectRepo~~ @author Stalary @description @date 2018/3/27 ~~@@@LogRepo~~ @author Stalary @description @date 2018/3/25 ~~@@@BaseRepo~~ @author Stalary @description @date 2018/3/25 ~~@@@UserRepo~~ @author Stalary @description @date 2018/3/25 ~~ 通过用户名和项目id查找一个用户 @param username @param projectId @param status @return ~~@@@StatRepo~~ @author Stalary @description @date 2018/3/26 ~~ 通过用户id批量查找统计信息 @param userId @return ~~ 通过用户id查找统计信息 @param userId @return ~~@@@TicketRepo~~ TicketRepo @author lirongqian @since 2018/03/26 ~~@@@